<?xml version="1.0" encoding="utf-8"?>
<feed xml:lang="en-us" xmlns="http://www.w3.org/2005/Atom"><title>Tobi Personal Website</title><link href="https://oluwatobi.dev" rel="alternate"/><link href="http://oluwatobi.dev/" rel="self"/><id>https://oluwatobi.dev</id><updated>2023-12-20T16:00:00-06:00</updated><entry><title>Fuzzy-Couscous - The CLI for a better django development experience</title><link href="https://oluwatobi.dev/blog/fuzzy_couscous_the_cli_for_a_better_django_development_experience" rel="alternate"/><published>2023-02-27T16:00:00-06:00</published><id>https://oluwatobi.dev/blog/fuzzy_couscous_the_cli_for_a_better_django_development_experience</id><summary type="html">A cli tool to bootstrap your django projects and enhance your development experience.</summary><content type="html">&lt;p&gt;Hello everyone!&lt;/p&gt;

&lt;p&gt;I'm excited to introduce you to &lt;a rel="nofollow" href="https://github.com/Tobi-De/fuzzy-couscous"&gt;fuzzy-couscous&lt;/a&gt;, my latest project designed to enhance your django development experience with Django.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Tobi-De/fuzzy-couscous/main/docs/assets/cuzzy_demo.gif" alt="showcase gif" /&gt;&lt;/p&gt;

&lt;p&gt;I've spent the last few months working on this command line tool, and I'm excited to share it with you and get your feedback.
The primary feature of fuzzy-couscous is to generate a django project using a project template that I've built, inspired heavily by the popular &lt;a rel="nofollow" href="https://github.com/cookiecutter/cookiecutter-django"&gt;cookiecutter-django&lt;/a&gt;
project template. I simplified their template as much as I could while adding some of my favorite tools like &lt;a rel="nofollow" href="https://htmx.org/"&gt;htmx&lt;/a&gt; and &lt;a rel="nofollow" href="https://python-poetry.org/"&gt;poetry&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With fuzzy-couscous, you can quickly create a new Django project using the built-in template, which includes support for either &lt;a rel="nofollow" href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; or &lt;a rel="nofollow" href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt;.
It also comes with a variety of convenient commands, such as launching multiple processes at once including the Django dev server, a Redis server, a worker process, and more (although I'm currently working on improving this feature),
as well as a command to easily download the latest version of htmx. I have some exciting ideas for potential new commands, including one to generate &lt;a rel="nofollow" href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;CRUD&lt;/a&gt; code (&lt;a rel="nofollow" href="https://github.com/Tobi-De/fuzzy-couscous/issues/27"&gt;#27&lt;/a&gt;)  and another to ensure that projects
created with fuzzy-couscous can easily get updates from the base template (&lt;a rel="nofollow" href="https://github.com/Tobi-De/fuzzy-couscous/issues/22"&gt;#22&lt;/a&gt;).
I'm always looking for new ideas and suggestions, so please feel free to open a &lt;a rel="nofollow" href="https://github.com/Tobi-De/fuzzy-couscous/discussions"&gt;GitHub discussion&lt;/a&gt; or an &lt;a rel="nofollow" href="https://github.com/Tobi-De/fuzzy-couscous/issues/new"&gt;issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This project is nothing revolutionary, but it's useful for me and I think it could be useful for other django developers out there.
If you're interested, you can find fuzzy-couscous on GitHub at https://github.com/Tobi-De/fuzzy-couscous.
I hope you'll give it a try and let me know what you think. Thanks for your time!&lt;/p&gt;
</content></entry><entry><title>Exploring SSE and PostgreSQL for Real-time Communication in Django</title><link href="https://oluwatobi.dev/blog/exploring_sse_and_postgresql_for_realtime_communication_in_django" rel="alternate"/><published>2023-09-16T16:00:00-05:00</published><id>https://oluwatobi.dev/blog/exploring_sse_and_postgresql_for_realtime_communication_in_django</id><summary type="html">Discover how we improved our Django project's realtime notification system by leveraging Server-Sent Events (SSE) and PostgreSQL LISTEN/NOTIFY.</summary><content type="html">&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: In this article, I explore how we built a relay system to serve real-time notifications to our Django project using Server-Sent Events (SSE) and PostgreSQL LISTEN/NOTIFY. Check out the final project on GitHub &lt;a rel="nofollow" href="https://github.com/Tobi-De/sse_relay_server"&gt;here&lt;/a&gt;. 🚀&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6esukxv1aw2io3jbr7p.png" alt="sse relay transmission diagram" /&gt;&lt;/p&gt;

&lt;p&gt;Recently, at my workplace, I was tasked with creating a real-time notification system for one of our Django projects. I opted for &lt;a rel="nofollow" href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events"&gt;Server-Sent Events&lt;/a&gt; (SSE). Luckily for me, around that time Django 4.2 introduced async iterators support for StreamingHttpResponse, which seemed ideal. However, as I delved deeper into the project, I decided instead to build a relay service using &lt;a rel="nofollow" href="https://github.com/Tobi-De/sse_server_postgres_listen_notify"&gt;Starlette&lt;/a&gt; which transmits messages received through the PostgreSQL LISTEN/NOTIFY protocol to client browsers connected via SSE.&lt;/p&gt;

&lt;p&gt;It all began with an excellent post on &lt;a rel="nofollow" href="https://valberg.dk/django-sse-postgresql-listen-notify.html"&gt;Writing a chat application in Django 4.2 using async StreamingHttpResponse, Server-Sent Events, and PostgreSQL LISTEN/NOTIFY&lt;/a&gt;. I read the post and successfully applied the concepts. This wasn't my first encounter with the PostgreSQL LISTEN/NOTIFY protocol; I knew that tools like Procrastinate (a Python task queue) also used it. This protocol was appealing because it eliminated the need to introduce additional infrastructure like Redis into our setup since we were already using PostgreSQL as our database. In the end, what I did added an extra service to our setup, but I think it was worth it, even just for the idea it sparked.&lt;/p&gt;

&lt;p&gt;Initially, the setup worked seamlessly. Notifications were correctly transmitted and received. We switched from using Gunicorn to Daphne to run the project, and everything seemed fine. However, after a while, a colleague noticed that our server was constantly receiving requests on our SSE async view. It turned out that the connection was consistently disrupted, causing the browser to repeatedly attempt reconnection. This ultimately led to our PostgreSQL database sporadically crashing with an error message stating "too many clients."&lt;/p&gt;

&lt;p&gt;At this point, we did something that, now that I think of it, makes absolutely no sense. We split our Django server into two instances: one running in WSGI mode with Gunicorn, and the other under Daphne in ASGI mode. It did not resolve the issue, maybe we did that thinking it would mitigate the issue. Who knows. However, it did provide me with an idea – replacing the Django app running under Daphne with something better suited for asynchronous operations.&lt;/p&gt;

&lt;p&gt;I ended up creating a relay using &lt;a rel="nofollow" href="https://www.starlette.io"&gt;Starlette&lt;/a&gt;, which transmitted messages received through the PostgreSQL &lt;a rel="nofollow" href="https://www.postgresql.org/docs/current/sql-listen.html"&gt;LISTEN&lt;/a&gt;/&lt;a rel="nofollow" href="https://www.postgresql.org/docs/15/sql-notify.html"&gt;NOTIFY&lt;/a&gt; protocol to client browsers connected via SSE (The diagram above). This solution proved to be more stable and reliable than the Django approach. Furthermore, it allowed me to simplify the original Django project by completely removing the ASGI setup and code from the project. I was not very fond of the idea of mixing and matching sync and asynchronous code anyway, so this was a win for me. For a straightforward communication method via SSE in Django, this approach worked pretty well.&lt;/p&gt;

&lt;p&gt;I've noticed several repositories on GitHub exploring similar ideas. I'm curious about its long-term viability 🤔, but for now, it works pretty well with our setup. After all, we only need the async stuff for real-time notifications. It was not worth turning our entire project into ASGI just for that. Plus, we can easily use the relay for some other precise and simple stuff in the project like updating charts, etc.&lt;/p&gt;

&lt;p&gt;Thanks for reading! I've turned the relay project into a package and a Docker image; you can check it out at &lt;a rel="nofollow" href="https://github.com/Tobi-De/sse_relay_server"&gt;https://github.com/Tobi-De/sse_relay_server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Easy database and migrations reset during development</title><link href="https://oluwatobi.dev/blog/easy-database-and-migrations-reset-during-development" rel="alternate"/><published>2022-10-30T16:00:00-05:00</published><id>https://oluwatobi.dev/blog/easy-database-and-migrations-reset-during-development</id><summary type="html">Remove all your django migrations files with one commmand.</summary><content type="html">
&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;touch&lt;span class="w"&gt; &lt;/span&gt;rm_migrations.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Copy the code below to your newly created &lt;code&gt;rm_migrations.py&lt;/code&gt;&lt;/p&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;apps_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;django_apps&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;excludes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;__init__.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;apps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;apps_dir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iterdir&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;migration_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;migrations&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;migration_dir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;migration_dir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iterdir&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suffix&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.py&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;excludes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; deleted&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Removed migration files for apps: &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Don't forget to update &lt;code&gt;django_apps&lt;/code&gt; in the script to the folder where your django applications are placed. The value you put should be a string representing the path of your django applications folder relative to the folder where the script is placed. I suggest placing the script in the root of your project.&lt;/p&gt;

&lt;p&gt;An example:&lt;/p&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;├──&lt;span class="w"&gt; &lt;/span&gt;my_projects
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;my_apps
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;manage.py
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;rm_migrations.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;With the setup describe above, you need to replace &lt;code&gt;django_apps&lt;/code&gt; by &lt;code&gt;my_apps&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Never push this file to production&lt;/strong&gt;, accident happens, but you don't want them to happen on your production code / data.
Add this line to your&lt;code&gt;.gitignore&lt;/code&gt; file:&lt;/p&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;rm_migrations.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Run the script with:&lt;/p&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python&lt;span class="w"&gt; &lt;/span&gt;rm_migrations.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;In the development phase, when the project idea is not fully formed or the product requirements are continually changing, it is common to completely rewrite or modify (in a non-migratable way) your django models, which requires cleaning up and recreating all your migration files. If your project consists of more than a few applications, deleting the files by hand is quite annoying.
With the above script, you can easily in one command delete all your migration files 😎.&lt;/p&gt;

&lt;p&gt;To reset my database (drop and recreate) I use the command below provided by the &lt;a rel="nofollow" href="https://django-extensions.readthedocs.io/en/latest/reset_db.html"&gt;django-extensions&lt;/a&gt; package.&lt;/p&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python&lt;span class="w"&gt; &lt;/span&gt;manage.py&lt;span class="w"&gt; &lt;/span&gt;reset_db&lt;span class="w"&gt; &lt;/span&gt;--noinput
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content></entry><entry><title>Bootstraping a production-ready django project</title><link href="https://oluwatobi.dev/blog/bootstraping-a-production-ready-django-project" rel="alternate"/><published>2022-10-30T16:00:00-05:00</published><id>https://oluwatobi.dev/blog/bootstraping-a-production-ready-django-project</id><summary type="html">If you have some experience with django and feel that the django django-admin startproject command is too light for you, then cookiecuter-django might be just what you are looking for.</summary><content type="html">&lt;p&gt;Through this guide, we will see how to start a new django project using a &lt;a rel="nofollow" href="https://github.com/cookiecutter/cookiecutter"&gt;cookiecutter&lt;/a&gt;. This guide is intended for beginners and intermediate level devs who already have experience with django and want a ready to use production grade setup for their django projects.
I'm promoting &lt;a rel="nofollow" href="https://github.com/pydanny/cookiecutter-django"&gt;cookiecutter-django&lt;/a&gt; here, but it's not the only one available in town, a quick search for django cookiecutter on the &lt;a rel="nofollow" href="https://djangopackages.org/grids/g/cookiecutters/"&gt;django packages&lt;/a&gt; website or &lt;a rel="nofollow" href="https://github.com/search?q=django+cookiecutter"&gt;GitHub&lt;/a&gt; will give you a ton of options.&lt;/p&gt;

&lt;p&gt;If you are wondering what I mean by &lt;strong&gt;production-ready&lt;/strong&gt;, here is a non-exhaustive list of what I expect :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;settings oriented towards the highest level of security&lt;/li&gt;
&lt;li&gt;basic deployment requirements included&lt;/li&gt;
&lt;li&gt;logging and monitoring set up&lt;/li&gt;
&lt;li&gt;postgresql requirements included&lt;/li&gt;
&lt;li&gt;linters and formatters already set up&lt;/li&gt;
&lt;li&gt;pytest set up&lt;/li&gt;
&lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And for convenience, &lt;strong&gt;cookiecutter-django&lt;/strong&gt; makes it easy to set up via the prompt common django packages that solve common issues such as :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Task queue manager (celery)&lt;/li&gt;
&lt;li&gt;Mail services (amazon SES, Sendgrid, etc.) etc.&lt;/li&gt;
&lt;li&gt;CI / CD pipeline (GitHub, gitlab, etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are already convinced at this point, just run the two commands below, and you are done 😀.&lt;/p&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cookiecutter&amp;gt;=1.7.0&amp;quot;&lt;/span&gt;
cookiecutter&lt;span class="w"&gt; &lt;/span&gt;https://github.com/cookiecutter/cookiecutter-django
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Read on for a closer look at all the options available and why you might want to ignore some of them to simplify the initial project generated a bit.&lt;/p&gt;

&lt;h2 id="so-what-is-a-cookiecutter-anyway"&gt;So what is a cookiecutter anyway ?&lt;/h2&gt;

&lt;p&gt;The &lt;a rel="nofollow" href="https://github.com/cookiecutter/cookiecutter"&gt;cookiecutter&lt;/a&gt; project was initiated by &lt;a rel="nofollow" href="https://github.com/audreyfeldroy"&gt;Audrey Feldroy&lt;/a&gt;, the co-author of the excellent &lt;a rel="nofollow" href="https://www.feldroy.com/collections/everything/products/two-scoops-of-django-3-x"&gt;Two Scoops of Django&lt;/a&gt;.  It is a command-line utility that creates projects from cookiecutters (project templates). There are a multitude of cookiecutters for various frameworks, django, flask, etc.&lt;/p&gt;

&lt;h2 id="generate-a-project-using-cookiecutter-django"&gt;Generate a project using cookiecutter-django&lt;/h2&gt;

&lt;p&gt;The default values are in brackets, if you see a blank line, then I used the default value by pressing the &lt;strong&gt;Enter&lt;/strong&gt; key. Throughout the article I have included many links to other articles to help understand what I can't go into here, but don't feel obligated to follow each link every time, or you may never get through it 😅. I suggest you read the entire article at least once, then revisit it by following the links that interest you.&lt;/p&gt;

&lt;h3 id="installation"&gt;Installation&lt;/h3&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cookiecutter&amp;gt;=1.7.0&amp;quot;&lt;/span&gt;
cookiecutter&lt;span class="w"&gt; &lt;/span&gt;https://github.com/cookiecutter/cookiecutter-django
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3 id="project-metadata"&gt;Project metadata&lt;/h3&gt;

&lt;p&gt;This section is for basic project information such as name, description, authors, etc.&lt;/p&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;project_name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;My&lt;span class="w"&gt; &lt;/span&gt;Awesome&lt;span class="w"&gt; &lt;/span&gt;Project&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;Ushopify
project_slug&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;ushopify&lt;span class="o"&gt;]&lt;/span&gt;:
description&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Behold&lt;span class="w"&gt; &lt;/span&gt;My&lt;span class="w"&gt; &lt;/span&gt;Awesome&lt;span class="w"&gt; &lt;/span&gt;Project!&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;My&lt;span class="w"&gt; &lt;/span&gt;amazing&lt;span class="w"&gt; &lt;/span&gt;ecommerce&lt;span class="w"&gt; &lt;/span&gt;platform.
author_name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Daniel&lt;span class="w"&gt; &lt;/span&gt;Roy&lt;span class="w"&gt; &lt;/span&gt;Greenfeld&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;John&lt;span class="w"&gt; &lt;/span&gt;Doe
domain_name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;example.com&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;ushopify.com
email&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;john-doe@example.com&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;doe@ushopify.com
version&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.1.0&lt;span class="o"&gt;]&lt;/span&gt;:
Select&lt;span class="w"&gt; &lt;/span&gt;open_source_license:
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;MIT
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;BSD
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;GPLv3
&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;Apache&lt;span class="w"&gt; &lt;/span&gt;Software&lt;span class="w"&gt; &lt;/span&gt;License&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0
&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;Not&lt;span class="w"&gt; &lt;/span&gt;open&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;
Choose&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;A source code license is a legal text that tells people what they may do with the source code, for example, edit it, use it, share it with others freely, etc. More information about software licensing &lt;a rel="nofollow" href="https://en.wikipedia.org/wiki/Software_license"&gt;here&lt;/a&gt;.&lt;/p&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;timezone&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;UTC&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;US/Pacific
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;I chose a completely random location. You can get the &lt;a rel="nofollow" href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones"&gt;full list of timezones&lt;/a&gt; or open your python shell (ever heard of &lt;a rel="nofollow" href="https://bpython-interpreter.org/"&gt;bpython&lt;/a&gt;?) and type this code:&lt;/p&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pytz&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;all_timezones&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tz&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_timezones&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3 id="editor-and-os"&gt;Editor and OS&lt;/h3&gt;

&lt;p&gt;I'm on linux, so &lt;strong&gt;n&lt;/strong&gt; for me.&lt;/p&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;windows&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;n&lt;span class="o"&gt;]&lt;/span&gt;:
use_pycharm&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;n&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;y
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;If you are using &lt;a rel="nofollow" href="https://www.jetbrains.com/pycharm/"&gt;pycharm&lt;/a&gt;, the cookiecutter will create &lt;code&gt;runserver&lt;/code&gt;, &lt;code&gt;migrate&lt;/code&gt; and more run configurations automatically for you, neat 😎.&lt;/p&gt;

&lt;h3 id="docker"&gt;Docker&lt;/h3&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;use_docker&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;n&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;n
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Docker is an open source platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure, so you can deliver software quickly. Enter &lt;strong&gt;y&lt;/strong&gt; and the cookiecutter will automatically create docker and docker-compose files to help you run your project locally and even deploy it with less effort. It's a great start to help you deploy your project, but I think it is necessary to have a minimum of experience with docker to understand how to correctly use the generated files. If you want more information about docker, read &lt;a rel="nofollow" href="https://www.docker.com/"&gt;this&lt;/a&gt;.&lt;/p&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Select&lt;span class="w"&gt; &lt;/span&gt;postgresql_version:
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;
&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;
Choose&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Set the version of postgresql to use in the Dockerfile for production. This only matters if you enter &lt;em&gt;y&lt;/em&gt; at the &lt;em&gt;use_docker&lt;/em&gt; option. As I don't often use the docker and docker compose configuration provided by the cookiecutter (I create my own files), it doesn't really matter to me.&lt;/p&gt;

&lt;h3 id="cloud-services"&gt;Cloud services&lt;/h3&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cloud_provider&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AWS&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GCP&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;Choose&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This is about static (HTML, CSS, static images like background images) and media files (file upload by you or your users like profile picture for example) storages. If you choose &lt;strong&gt;AWS&lt;/strong&gt; (amazon web service) or &lt;strong&gt;GCP&lt;/strong&gt; (google cloud provider), your project will be configured for these providers to handle static and media files in production. If you choose &lt;strong&gt;None&lt;/strong&gt;, then media files will not work by default (you will have to set it up yourself) in production and static files will work only if you choose &lt;strong&gt;y&lt;/strong&gt; on the option &lt;em&gt;use_whitenoise&lt;/em&gt;.
For a step-by-step guide on how to configure static and media files serving yourself using &lt;strong&gt;AWS&lt;/strong&gt;, watch &lt;a rel="nofollow" href="https://www.youtube.com/watch?v=kt3ZtW9MXhw&amp;list=PL-osiE80TeTtoQCKZ03TU5fNfx2UY6U4p&amp;index=16"&gt;this&lt;/a&gt;.&lt;/p&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mail_service&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Mailgun&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Amazon&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SES&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Mailjet&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Mandrill&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Postmark&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sendgrid&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SendinBlue&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SparkPost&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;
&lt;span class="n"&gt;Choose&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;I usually go with &lt;a rel="nofollow" href="https://aws.amazon.com/ses/"&gt;amazon SES&lt;/a&gt; because it is the easiest to set up for me, but do what you want based on your experience. For a simple setup based on &lt;a rel="nofollow" href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol"&gt;SMTP&lt;/a&gt; settings, choose &lt;strong&gt;9&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id="async-django"&gt;Async django&lt;/h3&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;use_async&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;n&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;blockquote&gt;
  &lt;p&gt;Indicates whether the project should use web sockets with Uvicorn + Gunicorn.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This statement is from the &lt;a rel="nofollow" href="https://cookiecutter-django.readthedocs.io/en/latest/project-generation-options.html"&gt;cookiecutter-django official documentation&lt;/a&gt;.
If you are not sure what it means, there is a high chance you don't need it, skip it.
If you want to know more about websocket in django, read &lt;a rel="nofollow" href="https://dev.to/alexoleshkevich/websockets-in-django-3-1-532o"&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="django-rest-framework"&gt;Django rest framework&lt;/h3&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;use_drf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;n&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;In case you are building a json based API, then choose &lt;strong&gt;y&lt;/strong&gt;.
More info on Dango Rest framework &lt;a rel="nofollow" href="https://www.django-rest-framework.org/"&gt;here&lt;/a&gt;.  DRF is the go-to framework to build json-based APIs with django. What I call a json-based API here most people would call it a REST API, but &lt;a rel="nofollow" href="https://htmx.org/essays/how-did-rest-come-to-mean-the-opposite-of-rest/"&gt;here's why&lt;/a&gt; they're wrong.&lt;/p&gt;

&lt;h3 id="frontend"&gt;Frontend&lt;/h3&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Select&lt;span class="w"&gt; &lt;/span&gt;frontend_pipeline:
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;None
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;Django&lt;span class="w"&gt; &lt;/span&gt;Compressor
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;Gulp
Choose&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The tools suggested here are for minification, transpilation, etc of static assets (CSS, JS, etc). I don't use any of them, so my answer is always the default, &lt;strong&gt;None&lt;/strong&gt;.
If you want to know more about these tools, check out their official documentation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a rel="nofollow" href="https://gulpjs.com/"&gt;Gulp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a rel="nofollow" href="https://github.com/django-compressor/django-compressor"&gt;django-compressor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="celery"&gt;Celery&lt;/h3&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;use_celery&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;n&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a rel="nofollow" href="https://github.com/celery/celery"&gt;Celery&lt;/a&gt; is an open source asynchronous task queue or job queue which is based on distributed message passing. While it supports scheduling, its focus is on operations in real time. That was the wikipedia definition 😅.
Celery is used to handle asynchronous tasks (background tasks) and scheduled tasks (things that should happen in the future).
I don't use celery that much, I find it a bit too complex for most of my use cases.
You can read my article on [[Handling background tasks in django]] to see how I handle this kind of stuff in my projects.&lt;/p&gt;

&lt;h3 id="local-email-server-setup"&gt;Local email server setup&lt;/h3&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;use_mailhog&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;n&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;y
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a rel="nofollow" href="https://github.com/mailhog/MailHog"&gt;MailHog&lt;/a&gt; is an email testing tool for developers. The &lt;a rel="nofollow" href="https://docs.djangoproject.com/en/4.1/topics/email/#console-backend"&gt;django console backend&lt;/a&gt; is set up for local development if you choose &lt;strong&gt;n&lt;/strong&gt; but mailhog gives you a nice graphical user interface (GUI) when you test your email delivery locally.&lt;/p&gt;

&lt;h3 id="sentry-production-error-tracking"&gt;Sentry - production error tracking&lt;/h3&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;use_sentry&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;n&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;y
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a rel="nofollow" href="https://github.com/getsentry/sentry"&gt;Sentry&lt;/a&gt; is an error monitoring and tracking system. I recommend you always choose &lt;strong&gt;y&lt;/strong&gt; if you know your app is going in production, it will avoid you the hassle of always switching your &lt;strong&gt;DEBUG&lt;/strong&gt; environment variable value to see errors when they happened in production. It is very easy to set up, just follow the &lt;a rel="nofollow" href="https://docs.sentry.io/platforms/python/guides/django/"&gt;official guide&lt;/a&gt; If you want to configure it manually. If you choose &lt;strong&gt;y&lt;/strong&gt; the only thing you need is a &lt;strong&gt;Sentry DSN&lt;/strong&gt; key that you can get by creating a django app on the official &lt;a rel="nofollow" href="https://sentry.io"&gt;web platform&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="whitenoise"&gt;Whitenoise&lt;/h3&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;use_whitenoise&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;n&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;y
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a rel="nofollow" href="https://github.com/evansd/whitenoise"&gt;Whitenoise&lt;/a&gt; serves your static files in production and &lt;a rel="nofollow" href="http://whitenoise.evans.io/en/stable/django.html#using-whitenoise-in-development"&gt;locally&lt;/a&gt; if you want it to.  I usually choose &lt;strong&gt;y&lt;/strong&gt; because having the same setup for production and local development can help mitigate surprises on your production environment.&lt;/p&gt;

&lt;h3 id="heroku"&gt;Heroku&lt;/h3&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;use_heroku&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;n&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;y
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Heroku is a hosting platform for web applications. The cookiecutter will add the necessary requirements for your project to work on heroku, these requirements being:
- A requirements.txt file with all your project production requirements
- A &lt;a rel="nofollow" href="https://devcenter.heroku.com/articles/procfile"&gt;Procfile&lt;/a&gt;
If you are using a similar deployment method based on a procfile like [[Host your Django project on DigitalOcean using dokku|dokku]] type &lt;em&gt;y&lt;/em&gt; if not then &lt;em&gt;n&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id="continuous-integration-ci"&gt;Continuous Integration (CI)&lt;/h3&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Select&lt;span class="w"&gt; &lt;/span&gt;ci_tool:
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;None
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;Travis
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;Gitlab
&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;Github
Choose&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Select an option other than the default if you are planning to set up a CI/CD pipeline for your project. More info on how to set up CI/CD for a django project &lt;a rel="nofollow" href="https://buddy.works/docs/quickstart/django"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="environment-variables"&gt;Environment variables&lt;/h3&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;keep_local_envs_in_vcs&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;y&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;If you typed &lt;strong&gt;y&lt;/strong&gt; on the &lt;strong&gt;use_docker&lt;/strong&gt; or &lt;strong&gt;use_heroku&lt;/strong&gt; option, then your project will have a &lt;code&gt;.envs&lt;/code&gt; folder with &lt;code&gt;.local&lt;/code&gt; and &lt;code&gt;.production&lt;/code&gt; subdirectories.
If on the current option you type &lt;strong&gt;n&lt;/strong&gt;, both folder will be kept out of your version control system (VCS), if you choose the default value your `.local will be tracked by your VCS.&lt;/p&gt;

&lt;h3 id="cookiecutter-debug"&gt;Cookiecutter debug&lt;/h3&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;debug&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;n&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This option is only for Cookiecutter Django developers only, choose the default value.&lt;/p&gt;

&lt;p&gt;If all went well, you will get this message.&lt;/p&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;SUCCESS&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;Project&lt;span class="w"&gt; &lt;/span&gt;initialized,&lt;span class="w"&gt; &lt;/span&gt;keep&lt;span class="w"&gt; &lt;/span&gt;up&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;good&lt;span class="w"&gt; &lt;/span&gt;work!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2 id="structures-of-the-project"&gt;Structures of the project&lt;/h2&gt;

&lt;p&gt;Let's take a quick look at the generated project. I use &lt;a rel="nofollow" href="https://www.tecmint.com/linux-tree-command-examples/"&gt;tree&lt;/a&gt; to get a two-level tree view generated project.&lt;/p&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ushopify
tree&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;



&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;├──&lt;span class="w"&gt; &lt;/span&gt;CONTRIBUTORS.txt
├──&lt;span class="w"&gt; &lt;/span&gt;LICENSE
├──&lt;span class="w"&gt; &lt;/span&gt;README.md
├──&lt;span class="w"&gt; &lt;/span&gt;config
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;__init__.py
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;settings
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;urls.py
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;wsgi.py
├──&lt;span class="w"&gt; &lt;/span&gt;docs
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;Makefile
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;__init__.py
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;conf.py
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;howto.rst
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;index.rst
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;make.bat
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;pycharm
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;users.rst
├──&lt;span class="w"&gt; &lt;/span&gt;locale
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;README.rst
├──&lt;span class="w"&gt; &lt;/span&gt;manage.py
├──&lt;span class="w"&gt; &lt;/span&gt;pytest.ini
├──&lt;span class="w"&gt; &lt;/span&gt;requirements
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;base.txt
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;local.txt
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;production.txt
├──&lt;span class="w"&gt; &lt;/span&gt;setup.cfg
├──&lt;span class="w"&gt; &lt;/span&gt;ushopify
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;__init__.py
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;conftest.py
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;contrib
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;static
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;templates
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;users
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;utils
└──&lt;span class="w"&gt; &lt;/span&gt;utility
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;install_os_dependencies.sh
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;install_python_dependencies.sh
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;requirements-bionic.apt
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;requirements-bullseye.apt
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;requirements-buster.apt
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;requirements-focal.apt
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;requirements-jessie.apt
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;requirements-stretch.apt
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;requirements-trusty.apt
&lt;span class="w"&gt;    &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;requirements-xenial.apt

&lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;directories,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;files
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;At the root of your project should have these directories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config&lt;/code&gt;: store all your project settings and configurations. In the &lt;code&gt;settings&lt;/code&gt; subdirectory, you have a &lt;code&gt;base.py&lt;/code&gt; setting file for common settings, a &lt;code&gt;local.py&lt;/code&gt; and a &lt;code&gt;production.py&lt;/code&gt; file respectively for development and production specific settings. In the root of this directory, you have your classic &lt;code&gt;url.py&lt;/code&gt; (your project level urls configurations) and your &lt;code&gt;wsgi.py&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docs&lt;/code&gt;: if you need to write a documentation for your project, it is configured to use &lt;a rel="nofollow" href="https://www.sphinx-doc.org/en/master/index.html"&gt;sphinx&lt;/a&gt; documentation generator&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locale&lt;/code&gt;: this folder is there to store &lt;a rel="nofollow" href="https://docs.djangoproject.com/en/3.1/topics/i18n/translation/"&gt;translations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requirements&lt;/code&gt;: this folder contains all your project's requirements, the &lt;code&gt;base.txt&lt;/code&gt; file contains all requirements common to your dev and prod environments, the &lt;code&gt;local.txt&lt;/code&gt; file for your development environment and &lt;code&gt;production.txt&lt;/code&gt; for your production environment.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ushopify&lt;/code&gt;: this folder contains all your templates and statics files, it also contains a &lt;code&gt;users&lt;/code&gt; app created by the cookiecutter. This app use the excellent &lt;a rel="nofollow" href="https://github.com/pennersr/django-allauth"&gt;allauth&lt;/a&gt; package to offers your project full user management system, login, logout, reset password, change password, change email, email verification and much more. The &lt;code&gt;users&lt;/code&gt; app contains a &lt;code&gt;tests&lt;/code&gt; directory with test files structured like this: &lt;code&gt;test_{module}.py&lt;/code&gt;. This test structure is the one defined in the &lt;code&gt;ushopify/conftest.py&lt;/code&gt; file. Follow it when writing your tests, or update the &lt;code&gt;conftest.py&lt;/code&gt; file to match your needs. In this folder, you also have a &lt;code&gt;utils&lt;/code&gt; subdirectory that contains a &lt;code&gt;context_processors.py&lt;/code&gt; file. Read this short &lt;a rel="nofollow" href="https://dev.to/harveyhalwin/using-context-processor-in-django-to-create-dynamic-footer-45k4"&gt;article&lt;/a&gt; for more information on context processors.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Utility&lt;/code&gt;: this folder contains some bash scripts that help you install system and project requirements, useful only if you are planning on deploying on a linux server and set up the server yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Beside those directories, you have the classic &lt;code&gt;manage.py&lt;/code&gt; file to run your commands, a &lt;code&gt;Procfile&lt;/code&gt; if you choose to deploy using Heroku, a &lt;code&gt;pytest.ini&lt;/code&gt; file because the project is configured to use &lt;a rel="nofollow" href="https://docs.pytest.org/en/stable/"&gt;pytest&lt;/a&gt; for testing.&lt;/p&gt;

&lt;h2 id="run-your-project"&gt;Run your project&lt;/h2&gt;

&lt;p&gt;Running your project works like for any other django project, you create a virtual environment, you install the requirements, create a database, then run your migrations.
You can find detailed instructions &lt;a rel="nofollow" href="https://cookiecutter-django.readthedocs.io/en/latest/developing-locally.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I know it was a lot to digest and the project generated can seem very complex the first time, but you get used to it with time. If you feel like some of the generated defaults don't work for you, want to use &lt;a rel="nofollow" href="https://python-poetry.org/"&gt;poetry&lt;/a&gt; instead of a virtualenv, don't like the exact folder structure, etc, I encourage you to &lt;a rel="nofollow" href="https://cookiecutter.readthedocs.io/en/stable/tutorials/tutorial2.html"&gt;build your own cookiecutter&lt;/a&gt; or create a simpler version with the &lt;a rel="nofollow" href="https://www.valentinog.com/blog/django-project/"&gt;django project template system&lt;/a&gt;.
If you have any comments, feel free to leave them in the comment section below and subscribe to keep up to date with my findings 😃.&lt;/p&gt;
</content></entry><entry><title>The Art of Skimming Through Documentation</title><link href="https://oluwatobi.dev/blog/the_art_of_skimming_through_documentation" rel="alternate"/><published>2023-12-20T16:00:00-06:00</published><id>https://oluwatobi.dev/blog/the_art_of_skimming_through_documentation</id><summary type="html">Discover the power of skimming through documentation to uncover new techniques and tools. By speed reading and browsing through chapters and paragraphs, you can gain a sense of possibilities and deepen your understanding of a tool.</summary><content type="html">&lt;blockquote&gt;
  &lt;p&gt;TL;DR: The title is already self-explanatory,  but nonetheless: Skimming through well-written documentation is one of the best ways I know to discover new techniques and tools. It is easier and can sometimes be more effective than straining your brain attempting to decode someone else's code for the purpose of learning.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This could have been the perfect opportunity to begin with the classic: &lt;em&gt;This is something I wish I knew as a beginner&lt;/em&gt;. However, in my case, I believe I was already doing this even as a beginner. I don't recall where I picked it up, but I knew two things that might have pushed me toward that edge:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There is a lot to understand in this tech stuff.&lt;/li&gt;
&lt;li&gt;Understanding any topic requires reading about it first. Reading may not be enough, but it is a prerequisite at least.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I'm sure you've already heard countless times the classic &lt;em&gt;go read the docs advice&lt;/em&gt;. Some colleagues might have even shouted that to you. And I can reassure you, they were right. Reading documentation is crucial, but I'm here to advocate for something else, similar yet different and also complementary - &lt;strong&gt;skimming through the documentation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What do I mean by skimming? The basic workflow for most is as follows: use a tool, encounter a problem, Google for a solution (or refer to the documentation if you're more experienced and if it is applicable), and repeat the cycle. This approach works fine and you'll eventually become proficient with that tool after repeated use.&lt;/p&gt;

&lt;p&gt;But let's imagine this: the first time you use the tool, you skim through the docs. You speed run it, reading every chapter title and subtitle, and maybe even a few lines of each paragraph (if you have time and the doc isn't too long, you might read the whole thing). The first thing you'll gain from this is a sense of &lt;strong&gt;possibilities&lt;/strong&gt;. You'll get a general overview of what you can do with the tool, and a deeper one than if you had just read the readme or tutorial section. Who knows, perhaps while reading, you'll discover a new approach or pattern, or even a new tool(maybe a dependency of that project). I can give you two examples of when that happened to me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I gained a better understanding of concurrency in Python while reading the &lt;a rel="nofollow" href="https://fastapi.tiangolo.com/async/"&gt;FastAPI docs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I discovered the PostgreSQL &lt;code&gt;LISTEN/NOTIFY&lt;/code&gt; protocol while reading the &lt;a rel="nofollow" href="https://procrastinate.readthedocs.io/en/stable/discussions.html#why-are-you-doing-a-task-queue-in-postgresql"&gt;Procrastinate documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The patterns and tools that I discovered while exploring the deeper parts of tool documentation often bring me value later on.
You can also view skimming through the documentation as a form of preliminary research. Doing so will assist you in acquiring enough background knowledge to make using the tool easier and, as they say, effortlessly &lt;em&gt;connecting the dots&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Small aside, this "A.I." trend is taking away the opportunity for a lot of people to appreciate well-written documentation. Copilot and ChatGPT are great for getting quick answers, but they usually keep you on a surface level of understanding (unless you continuously prompt them for deeper knowledge, which I doubt most people do). These tools are lowering the barrier to entry and increasing productivity for developers, but at the cost of a deeper understanding of the tools they are using. The best developers I know are the one with a deep knowledge in their craft. But who knows, maybe we will all be obsolete in a decade and none of this will matter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A side benefit of skimming through documentation is increasing your chances for those moments when you think, &lt;em&gt;Haven't I read something on this somewhere?&lt;/em&gt; It's unlikely that you'll remember even half of what you skimmed through, but that's not the point. The goal is to potentially discover new techniques and tools and increase your chances for these &lt;strong&gt;déjà vu&lt;/strong&gt; moments when you stumble upon an issue that might be solved by something you already read in the past.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Small Tip: Reading code can be challenging, especially when dealing with large projects written by others. However, even if you can't understand the code itself, take a look at the requirements or dependencies - you might find something valuable there!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I hope you have learned something from this article. What I describe here may not work for you or match your style of learning, and that's fine. I'm just making you aware of this option in case it was not already the case. And if you are already doing this, great buddy! Just know that you are not alone.&lt;/p&gt;
</content></entry><entry><title>A comprehensive guide to  multi-timezone support in Django</title><link href="https://oluwatobi.dev/blog/a-comprehensive-guide-to-multi-timezone-support-in-django" rel="alternate"/><published>2023-10-11T16:00:00-05:00</published><id>https://oluwatobi.dev/blog/a-comprehensive-guide-to-multi-timezone-support-in-django</id><summary type="html">Discover how to seamlessly manage timezones in Django and empower your applications with user-centric solutions.
This article is your essential guide to precise and efficient multi-timezone support.</summary><content type="html">&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: To support multiple timezones in your Django project, you need a way to request your users' specific timezones and create a middleware that uses &lt;code&gt;django.timezone.activate(user_tz)&lt;/code&gt; to enable a specific timezone for a user globally on your site. This ensures that every use of &lt;code&gt;django.timezone.now()&lt;/code&gt; uses the activated timezone. If you prefer reading code directly, see &lt;a rel="nofollow" href="https://github.com/Tobi-De/leerming/blob/main/leerming/profiles/middleware.py"&gt;middleware.py&lt;/a&gt; and &lt;a rel="nofollow" href="https://github.com/Tobi-De/leerming/blob/main/leerming/profiles/models.py"&gt;models.py&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Throughout this article, I'll guide you on setting up multi-timezone support in a Django project. This post is aimed at beginners (assuming basic Django knowledge) and intermediates. If what I'm writing seems blatantly obvious to you, you're likely not in one of these categories, so please bear with us.&lt;/p&gt;

&lt;h3 id="introduction"&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Time is universally a challenging subject to deal with, especially in software engineering. Handling time zones correctly is hard. Luckily for us, when working with Django, a significant portion of the work has already been done.&lt;/p&gt;

&lt;p&gt;For the longest time (literally until yesterday), I thought that the piece of code below was enough to have timezones fully managed and working in Django:&lt;/p&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;TIME_ZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;UTC&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;# Sometimes, I&amp;#39;d switch this to my primary audience&amp;#39;s timezone.&lt;/span&gt;
&lt;span class="n"&gt;USE_TZ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;It turns out I was wrong, or at least I was missing the full picture. There's a bit more work left if you want to consider every user's timezone. Let's explore what's left to do.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; The official &lt;a rel="nofollow" href="https://docs.djangoproject.com/en/4.2/topics/i18n/timezones/"&gt;Django documentation on timezones&lt;/a&gt; is very well written, so I highly suggest you read it. However, this article will provide you with the essentials, at least that's what I hope.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="the-basics"&gt;The Basics&lt;/h3&gt;

&lt;p&gt;First, let's start with the basics. In Python, there are two types of datetime objects: naive and aware. We'll keep it simple. Naive datetime objects hold no timezone information, while aware datetimes hold timezone information.&lt;/p&gt;

&lt;p&gt;When you have the &lt;code&gt;USE_TZ&lt;/code&gt; setting set to &lt;code&gt;True&lt;/code&gt; in your project settings (as shown in the snippet above), Django will ensure that all the DateTime objects you create are timezone-aware. This is, of course, assuming that you use Django's timezone module to create your dates.&lt;/p&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;timezone&lt;/span&gt;

&lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This works if you're not concerned about user-specific timezones, and you're not doing anything fancy with datetime. But what if you are?&lt;/p&gt;

&lt;h3 id="the-challenge"&gt;The Challenge&lt;/h3&gt;

&lt;p&gt;Let me paint a picture: I'm building an app where I need to send daily notifications to users at specific times. My project's timezone is set to &lt;code&gt;UTC&lt;/code&gt; – the recommended practice by most of the Django community. Here's the twist: I live in a UTC+1 timezone, and I realized my notifications were coming in an hour late. My cousin, who lives in Europe at a different timezone, also uses my app. Changing the default timezone wasn't an option. My cousin and I, along with potentially many other users, needed to navigate the app seamlessly without time feeling off. Scheduling and time management are at the core of my app, and I couldn't afford to mess that up.
So, I decided to dive deep into understanding how Django deals with time zones – something I'd never made a priority before.&lt;/p&gt;

&lt;p&gt;After reading and re-reading the Django documentation, things started to click. First, let's grasp the fundamentals and then dive into setting up our timezone magic.&lt;/p&gt;

&lt;p&gt;There are two important concepts that Django uses: the "default time zone" and the "current time zone."&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;default time zone&lt;/strong&gt; is the timezone you set in your Django settings via &lt;code&gt;TIME_ZONE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;current time zone&lt;/strong&gt; is the timezone used for rendering. It's the one in which your users will browse your site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;current time zone&lt;/code&gt; defaults to the &lt;code&gt;default time zone&lt;/code&gt; unless you &lt;strong&gt;activate&lt;/strong&gt; the user's specific timezone using &lt;code&gt;django.utils.timezone.activate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Does it start to make sense?
Django, by default, doesn't know a user's timezone. It's not typically available in request data, so it sticks with the default timezone. You need to ask your users for their time zone – a simple form does the trick – and then manually activate it. The easiest and probably the best way to do this is through a middleware.&lt;/p&gt;

&lt;h3 id="setting-up-multi-timezone-support"&gt;Setting Up Multi-Timezone Support&lt;/h3&gt;

&lt;p&gt;Now, let's dive into a simple example. We'll create a user &lt;code&gt;Profile&lt;/code&gt; model to collect and store each user's timezone. For simplicity's sake, I'll leave out the non-essential parts of the code.&lt;/p&gt;

&lt;p&gt;Here's a model for our users' profiles:&lt;/p&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;zoneinfo&lt;/span&gt;

&lt;span class="n"&gt;TIMEZONES_CHOICES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tz&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;zoneinfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available_timezones&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TimeStampedModel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OneToOneField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;users.User&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;profile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;timezone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Fuseau horaire&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UTC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TIMEZONES_CHOICES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;With the model above, we have a simple &lt;code&gt;CharField&lt;/code&gt; to hold the user's timezone and a choices field to render a select using a Django form. You can customize the list of available timezones obtained from the &lt;code&gt;zoneinfo module&lt;/code&gt;. For a simpler user experience, you might choose to filter it by continent or display the city as the label.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip: If you're displaying a long list of timezones, consider using a select element with a search feature(e.g, &lt;a rel="nofollow" href="https://github.com/orchidjs/tom-select"&gt;tom-select&lt;/a&gt;) for a better user experience.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You'll need to create a form and a view to set the timezone value – standard Django stuff.&lt;/p&gt;

&lt;p&gt;Now, let's create the middleware to activate the user's timezone:&lt;/p&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;zoneinfo&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;timezone&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Profile&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TimezoneMiddleware&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_response&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_authenticated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;Profile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoesNotExist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deactivate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zoneinfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ZoneInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deactivate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This middleware activates the user's timezone if they're authenticated and have a profile. In other cases, we call &lt;code&gt;deactivate&lt;/code&gt;, which sets the timezone to the default. While this last step is not strictly required, that's how the Django docs suggest doing it, so let's stick with that. To complete the setup, don't forget to register your middleware in your settings within the &lt;code&gt;MIDDLEWARE&lt;/code&gt; list.&lt;/p&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;MIDDLEWARE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
     &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;your_app.middleware.TimezoneMiddleware&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;With this setup, we've made sure that every call to &lt;code&gt;timezone.now&lt;/code&gt; will takes the user's specific timezone into account. When datetime objects are saved to the database, they are automatically converted to UTC. For example, in my case (UTC+1), if I input "6:00 pm" on the UI to record a time, it will be saved in the database as &lt;code&gt;5:00 pm&lt;/code&gt; (though it will still be rendered as "6:00 pm" to me on the frontend).&lt;/p&gt;

&lt;h3 id="quick-tips-and-bits"&gt;Quick Tips and bits:&lt;/h3&gt;

&lt;p&gt;If you need to create a timezone-aware datetime object manually, for example by combining a date and time, here's how you do it:&lt;/p&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;dt&lt;/span&gt;

&lt;span class="n"&gt;naive_datetime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;aware_datetime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_aware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;naive_datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;zoneinfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ZoneInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_timezone&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The code below will generate a new migration every time you run &lt;code&gt;python manage.py makemigrations&lt;/code&gt;:&lt;/p&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;TIMEZONES_CHOICES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tz&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;zoneinfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available_timezones&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;timezone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Fuseau horaire&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UTC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TIMEZONES_CHOICES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The culprit line is &lt;code&gt;choices=TIMEZONES_CHOICES&lt;/code&gt;. A simple fix is to update the migrations file to use the  &lt;code&gt;TIMEZONES_CHOICES&lt;/code&gt; constant directly:&lt;/p&gt;


&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;model_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;profile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;timezone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TIMEZONES_CHOICES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UTC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3 id="conclusion"&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;There you have it! Your Django app is now fully equipped to support multiple timezones.
I hope this article adds a touch of timezone magic to your Django projects.
Thanks for the read.&lt;/p&gt;
</content></entry><entry><title>Maximizing Productivity: PyCharm and htmx Integration</title><link href="https://oluwatobi.dev/blog/maximizing-productivity-pycharm-and-htmx-integration" rel="alternate"/><published>2022-11-05T16:00:00-05:00</published><id>https://oluwatobi.dev/blog/maximizing-productivity-pycharm-and-htmx-integration</id><summary type="html">Throughout this quick guide, we will see how to add htmx support (documentation and autocompletion) in pycharm.</summary><content type="html">&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; Learn how to add support for htmx in PyCharm for seamless development using &lt;a rel="nofollow" href="https://github.com/JetBrains/web-types#web-types"&gt;web-types&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you're not familiar with htmx, check out this fantastic &lt;a rel="nofollow" href="https://www.youtube.com/watch?v=Ula0c_rZ6gk"&gt;htmx + Django introduction&lt;/a&gt; by &lt;a rel="nofollow" href="https://www.bugbytes.io/"&gt;BugBytes&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="introduction"&gt;Introduction&lt;/h3&gt;

&lt;p&gt;&lt;a rel="nofollow" href="https://htmx.org/"&gt;htmx&lt;/a&gt; is my go-to frontend tool for building web applications, and &lt;a rel="nofollow" href="https://www.jetbrains.com/pycharm/"&gt;PyCharm from JetBrains&lt;/a&gt; is my daily code editor/IDE. Unfortunately, by default, PyCharm doesn't recognize htmx attributes when used in templates, resulting in ugly warning lines 🙁.  This article will guide you on how to resolve this issue and improve your development workflow.&lt;/p&gt;

&lt;h3 id="the-fix"&gt;The Fix&lt;/h3&gt;

&lt;p&gt;There's a simple way to add autocompletion and documentation for htmx attributes in JetBrains editors using &lt;a rel="nofollow" href="https://github.com/JetBrains/web-types#web-types"&gt;web-types&lt;/a&gt;. Web-types is a JSON-based format that provides IDEs with metadata information about web component libraries like htmx. I stumbled upon this tip via &lt;a rel="nofollow" href="https://twitter.com/sponsfreixes/status/1573725414643535872"&gt;this tweet&lt;/a&gt;, so kudos to the author for sharing it!&lt;/p&gt;

&lt;h3 id="step-by-step-guide"&gt;Step-by-Step Guide&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create a &lt;code&gt;package.json&lt;/code&gt; File&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Start by creating a &lt;code&gt;package.json&lt;/code&gt; file, the central configuration file for Node.js-based applications. Although we're not building a Node.js package, this is the method to reference web-types in your PyCharm project. Ensure you have Node.js installed on your computer. If not, I recommend using &lt;a rel="nofollow" href="https://github.com/nvm-sh/nvm"&gt;nvm&lt;/a&gt; to install it. After installing Node.js, you can use &lt;code&gt;npm&lt;/code&gt; (included with all Node.js installations) to initialize a Node.js project and generate the &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;   &lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;init&lt;span class="w"&gt; &lt;/span&gt;-y
&lt;span class="w"&gt;  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create &lt;code&gt;htmx.web-types.json&lt;/code&gt; File&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a new file named &lt;code&gt;htmx.web-types.json&lt;/code&gt; and copy the htmx &lt;a rel="nofollow" href="https://github.com/bigskysoftware/htmx/blob/master/editors/jetbrains/htmx.web-types.json"&gt;web-types source&lt;/a&gt; into it:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;   &lt;/span&gt;touch&lt;span class="w"&gt; &lt;/span&gt;htmx.web-types.json
&lt;span class="w"&gt;  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Update &lt;code&gt;package.json&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Add a new entry to your &lt;code&gt;package.json&lt;/code&gt; with "web-types" as the key and the path to your &lt;code&gt;htmx.web-types.json&lt;/code&gt; file as the value. Here's an example:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;web-types&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;./htmx.web-types.json&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Enjoy Autocompletion and Documentation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, in your HTML templates, type an htmx attribute like &lt;code&gt;hx-get&lt;/code&gt;, and you should see autocompletion and documentation directly accessible in your IDE. Cool, right? 😎&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="conclusion"&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;With this simple setup, you can enhance your PyCharm experience and work seamlessly with htmx attributes in your Django projects. Happy coding!&lt;/p&gt;
</content></entry></feed>